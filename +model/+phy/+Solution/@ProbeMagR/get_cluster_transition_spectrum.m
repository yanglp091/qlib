function [obs_tf,obs_pro]=get_cluster_transition_spectrum(obj,cluster,IntPara)   
%For zero field case, we choose the |1> and |-1> as the probing qubit.
% Here, we want to calculate the transition frequecy induced by the
% hyperfine field.
    import model.phy.SpinInteraction.SpinChainInteraction.XXInteraction
    import model.phy.SpinInteraction.SpinChainInteraction.YYInteraction
    import model.phy.SpinInteraction.SpinChainInteraction.ZZInteraction
    
    AddDipInt=obj.parameters.AddDipInt;
    AddContact=obj.parameters.AddContact;
    para=IntPara;

    spin_collection=cluster.spin_collection;
    hami0=model.phy.QuantumOperator.SpinOperator.Hamiltonian(spin_collection); 
    if AddDipInt
        dip_interaction=model.phy.SpinInteraction.DipolarInteraction(spin_collection);
        hami0.addInteraction(dip_interaction);
    end
    if AddContact
        hami0.addInteraction( XXInteraction(spin_collection, para));
        hami0.addInteraction( YYInteraction(spin_collection, para));
        hami0.addInteraction( ZZInteraction(spin_collection, para));
    end
    hm0=full(hami0.getMatrix);
    
    [V,D]=eig(hm0);
    eig_vals=diag(D);
    dim=length(eig_vals);
    eig_mat1=kron(eig_vals,ones(1,dim));eig_mat2=kron(ones(dim,1),eig_vals.');
    %transiton frequency matrix omega_{mn}, here we add a constant 1 to remove the divergence induced by the transition between degenerate states ...
    tf_mat=abs(real(eig_mat1-eig_mat2)+ones(dim,dim));
    tf_mat_square=tf_mat.*tf_mat;
    
    %the Hamiltonian of the MagR under different dipolar field generated by the NV center 
    hami1p=cluster.hami_list{1};    hami1n=cluster.hami_list{2};
    hmp=full(hami1p.getMatrix);     hmn=full(hami1n.getMatrix);
    
    % remove diagonal elements since transition between degenerated states does not contribute to the decoherence of the NV ..
    transition_am=V'*(hmp-hmn)*V;transition_am=transition_am-diag( diag(transition_am) );
    transition_pro=transition_am.*conj(transition_am)./tf_mat_square;
    transition_pro=transition_pro-diag( diag(transition_pro) );
    idx=transition_pro<1;
    obs_tf=tf_mat(idx);
    obs_pro=transition_pro(idx);
        
end